# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

# Load environment variables from .env file
require 'dotenv'
dotenv_path = File.join(__dir__, "..", "..", ".env")
Dotenv.load(dotenv_path) if File.exist?(dotenv_path)

# Check if environment variables are set
required_env_vars = ["APP_STORE_CONNECT_API_KEY_ID", "APP_STORE_CONNECT_ISSUER_ID", "APP_STORE_CONNECT_API_KEY_BASE64", "BUNDLE_ID"]
required_env_vars.each do |var|
  UI.user_error!("Missing required environment variable: #{var}") unless ENV[var]
end

default_platform(:ios)

platform :ios do
  desc "Build and upload a new version to the App Store and TestFlight"
  lane :deploy do
    # Set up App Store Connect API Key globally
    api_key = app_store_connect_api_key(
      key_id: ENV["APP_STORE_CONNECT_API_KEY_ID"],
      issuer_id: ENV["APP_STORE_CONNECT_ISSUER_ID"],
      key_content: Base64.decode64(ENV["APP_STORE_CONNECT_API_KEY_BASE64"])
    )

    # Inject environment variables into project files
    # This replaces BUNDLE_ID_PLACEHOLDER with the actual bundle ID
    UI.message("Injecting environment variables...")
    sh "SRCROOT=#{File.expand_path('..')} bash ../scripts/inject_env.sh"

    # Install CocoaPods to ensure dependencies are up to date
    UI.message("Installing CocoaPods dependencies...")
    cocoapods(podfile: "Podfile")

    # Fetch the latest build number from TestFlight and increment it
    # This avoids storing the build number in the repo and prevents conflicts
    # The marketing version (e.g., 1.0.1) should be updated manually by developers.
    
    begin
      latest_build_number = latest_testflight_build_number(
        app_identifier: ENV["BUNDLE_ID"]
      )
      new_build_number = latest_build_number + 1
    rescue => e
      UI.message("No previous builds found or error fetching build number: #{e.message}")
      UI.message("Starting with build number 1")
      new_build_number = 1
    end

    # Enable automatic code signing and provisioning for CD
    if ENV["CD"]
      UI.message("Setting up automatic code signing for CD...")
      automatic_code_signing(
        path: "Runner.xcodeproj",
        use_automatic_signing: true,
        team_id: "Y39YWD6Q4X"
      )
    end

    begin
      # Ensure correct Xcode path is set for CI/CD
      if ENV["CD"]
        UI.message("Setting up Xcode path for CI/CD...")
        sh "sudo xcode-select -s /Applications/Xcode.app" rescue UI.message("Could not set Xcode path, proceeding with current path")
        
        # Verify Xcode installation and tools
        UI.message("Verifying Xcode configuration...")
        sh "xcode-select -p" rescue UI.message("Could not get Xcode path")
        sh "xcodebuild -version" rescue UI.message("Could not get Xcode version")
        sh "xcrun --find xcodebuild" rescue UI.message("Could not find xcodebuild")
      end

      # Build the Flutter app, injecting the new build number.
      if ENV["CD"]
        # For CI/CD, use gym with proper setup and error handling
        UI.message("Building for CI/CD with gym and automatic provisioning...")
        
        # Clean and prepare Flutter project
        UI.message("Cleaning Flutter project...")
        sh "flutter", "clean"
        
        # Ensure build directory is clean
        UI.message("Cleaning build directories...")
        sh "rm -rf ../build/ios" rescue UI.message("Build directory didn't exist")
        
        UI.message("Getting Flutter dependencies...")
        sh "flutter", "pub", "get"
        
        # Regenerate native splash screen
        UI.message("Regenerating native splash screen...")
        sh "dart run flutter_native_splash:create" rescue UI.message("Could not regenerate splash screen")
        
        # Build Flutter project without code signing first
        UI.message("Building Flutter iOS project (no code signing)...")
        sh "flutter", "build", "ios", "--release", "--no-codesign", "--build-number=#{new_build_number}", "--verbose"
        
        # Then use gym to build and sign the IPA with better error handling
        UI.message("Creating signed IPA with gym...")
        begin
          gym(
            workspace: "Runner.xcworkspace",
            scheme: "Runner",
            configuration: "Release",
            clean: false,  # Don't clean since we just built
            archive_path: "../build/ios/archive/Runner.xcarchive",
            output_directory: "../build/ios/ipa",
            output_name: "xceleration.ipa",
            export_method: "app-store",
            export_options: {
              method: "app-store",
              teamID: "Y39YWD6Q4X",
              signingStyle: "automatic",
              uploadBitcode: false,
              uploadSymbols: true,
              compileBitcode: false,
              manageAppVersionAndBuildNumber: false,
              signingCertificate: "Apple Distribution",
              provisioningProfiles: {}
            },
                         xcargs: "-allowProvisioningUpdates",
            buildlog_path: "../build/ios/logs",
            suppress_xcode_output: false,
            verbose: true
          )
          UI.success("Gym build completed successfully!")
        rescue => e
          UI.error("Gym build failed with error: #{e.message}")
          UI.message("Checking for detailed build logs...")
          
          # Check build logs
          begin
            log_files = Dir.glob("../build/ios/logs/*.log")
            if !log_files.empty?
              UI.message("Build log content:")
              sh "tail -50 #{log_files.first}"
            end
          rescue
            UI.message("Could not read build logs")
          end
          
          # Check signing setup
          UI.message("Checking code signing setup...")
          sh "security find-identity -v -p codesigning" rescue UI.message("Could not list signing identities")
          sh "xcrun xcodebuild -showBuildSettings -workspace Runner.xcworkspace -scheme Runner -configuration Release" rescue UI.message("Could not show build settings")
          
          raise e
        end
      else
        # For local development, use the standard Flutter build
        sh "flutter", "build", "ipa", "--release", "--build-number=#{new_build_number}"
      end

      # Upload to TestFlight (will use the globally set API key)
      if ENV["CD"]
        # For CI/CD, gym creates the IPA with a specific name
        ipa_path = "../build/ios/ipa/xceleration.ipa"
      else
        # For local builds, find the IPA file created by Flutter build
        ipa_files = Dir.glob("../build/ios/ipa/*.ipa")
        if ipa_files.empty?
          UI.user_error!("No IPA file found in ../build/ios/ipa/")
        end
        ipa_path = ipa_files.first
      end
      
      UI.message("Using IPA: #{ipa_path}")
      
      upload_to_testflight(
        ipa: ipa_path,
        skip_waiting_for_build_processing: true,
        distribute_external: false,  # Keep this false for internal testing only
        notify_external_testers: false,  # Not needed for internal testing
        groups: ["XCeleration prototype"],  # internal group
        changelog: "Latest updates and bug fixes"  # Optional but recommended
      )
    ensure
      # Always revert environment injection to keep git clean
      UI.message("Reverting environment variable injection...")
      sh "SRCROOT=#{File.expand_path('..')} bash ../scripts/revert_env_injection.sh" rescue nil
    end
  ensure
    # Fallback cleanup in case of any errors
    UI.message("Final cleanup...")
    sh "SRCROOT=#{File.expand_path('..')} bash ../scripts/revert_env_injection.sh" rescue nil
  end
end