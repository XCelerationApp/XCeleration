# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

# Load environment variables from .env file
require 'dotenv'
dotenv_path = File.join(__dir__, "..", "..", ".env")
Dotenv.load(dotenv_path) if File.exist?(dotenv_path)

# Check if environment variables are set
required_env_vars = ["APP_STORE_CONNECT_API_KEY_ID", "APP_STORE_CONNECT_ISSUER_ID", "APP_STORE_CONNECT_API_KEY_BASE64", "BUNDLE_ID", "TEAM_ID", "FASTLANE_MATCH_REPO_URL"]
optional_env_vars = ["MATCH_PASSWORD"]

required_env_vars.each do |var|
  UI.user_error!("Missing required environment variable: #{var}") unless ENV[var]
end

optional_env_vars.each do |var|
  if !ENV[var]
    UI.important("⚠️ Optional environment variable #{var} not set. You may be prompted for this value.")
  end
end

default_platform(:ios)

platform :ios do
  desc "Build and upload a new version to the App Store and TestFlight"
  lane :deploy do
    # Set up App Store Connect API Key globally
    api_key = app_store_connect_api_key(
      key_id: ENV["APP_STORE_CONNECT_API_KEY_ID"],
      issuer_id: ENV["APP_STORE_CONNECT_ISSUER_ID"],
      key_content: Base64.decode64(ENV["APP_STORE_CONNECT_API_KEY_BASE64"])
    )

    # Install CocoaPods to ensure dependencies are up to date
    UI.message("Installing CocoaPods dependencies...")
    cocoapods(podfile: "Podfile")

    # Fetch the latest build number from TestFlight and increment it
    begin
      latest_build_number = latest_testflight_build_number(
        app_identifier: ENV["BUNDLE_ID"]
      )
      new_build_number = latest_build_number + 1
    rescue => e
      UI.message("No previous builds found or error fetching build number: #{e.message}")
      UI.message("Starting with build number 1")
      new_build_number = 1
    end

    # Store API key file path for cleanup
    api_key_file_path = nil

    begin
      # Step 1: Clean environment
      UI.message("Step 1: Cleaning build environment...")
      sh "flutter", "clean"
      sh "rm -rf ../../build/ios" rescue UI.message("Build directory already clean")
      
      # Step 2: Handle splash screen (non-blocking)
      UI.message("Step 2: Configuring splash screen...")
      begin
        sh "dart run flutter_native_splash:create"
        UI.success("✅ Splash screen regenerated")
      rescue => e
        UI.important("⚠️ Splash screen generation failed: #{e.message}")
        UI.message("Checking for existing splash files...")
        if Dir.glob("../../ios/Runner/Assets.xcassets/LaunchImage.imageset/*").any?
          UI.success("✅ Found existing splash files, continuing...")
        else
          UI.message("⚠️ No splash files found, but proceeding anyway...")
        end
      end
      
      # Step 3: Inject environment variables into project files
      UI.message("Step 3: Injecting environment variables...")
      if ENV["BUNDLE_ID"]
        sh "SRCROOT=#{File.expand_path('..')} bash ../scripts/inject_env.sh"
        UI.success("✅ Environment variables injected")
      else
        UI.message("No BUNDLE_ID found, skipping injection")
      end
      
      # Step 4: Set up signing environment (shared for both local and CI/CD)
      UI.message("Step 4: Setting up signing environment...")
      
      # Set up API key file for fastlane (both environments)
      if ENV["APP_STORE_CONNECT_API_KEY_ID"] && ENV["APP_STORE_CONNECT_ISSUER_ID"] && ENV["APP_STORE_CONNECT_API_KEY_BASE64"]
        UI.message("Setting up API key file for fastlane...")
        api_key_path = "./private_keys"
        sh "mkdir -p #{api_key_path}"
        api_key_file_path = "#{api_key_path}/AuthKey_#{ENV['APP_STORE_CONNECT_API_KEY_ID']}.p8"
        
        # Write the base64 decoded API key to the .p8 file
        File.write(api_key_file_path, Base64.decode64(ENV['APP_STORE_CONNECT_API_KEY_BASE64']))
        UI.success("✅ API key file created at #{api_key_file_path}")
        
        # Verify the file was created correctly
        if File.exist?(api_key_file_path) && File.size(api_key_file_path) > 0
          UI.success("✅ API key file verified (#{File.size(api_key_file_path)} bytes)")
        else
          UI.error("❌ API key file creation failed")
          raise "API key file was not created properly"
        end
        
        # Configure automatic code signing
        UI.message("Configuring automatic code signing...")
        update_code_signing_settings(
          path: "Runner.xcodeproj",
          use_automatic_signing: true,
          team_id: ENV["TEAM_ID"],
          targets: ["Runner", "RunnerTests"]
        )
        UI.success("✅ Signing environment ready")
        
        # CI/CD specific setup
        if ENV["CD"]
          UI.message("Applying CI/CD specific configurations...")
          
          # Ensure Xcode command line tools are configured
          sh "sudo xcode-select -s /Applications/Xcode.app" rescue UI.message("Xcode path already set")
          
          # Verify team access (optional)
          begin
            sh "xcrun altool --list-apps --apiKey #{ENV['APP_STORE_CONNECT_API_KEY_ID']} --apiIssuer #{ENV['APP_STORE_CONNECT_ISSUER_ID']} | head -3"
            UI.success("✅ Team access verified")
          rescue => e
            UI.important("⚠️ Team access verification failed: #{e.message}")
            UI.message("Continuing with build...")
          end
          
          # Set CI/CD specific timeouts
          ENV["FASTLANE_XCODE_LIST_TIMEOUT"] = "120"
          ENV["FASTLANE_XCODEBUILD_SETTINGS_TIMEOUT"] = "120"
          
          UI.success("✅ CI/CD environment configured")
        else
          UI.success("✅ Local environment configured")
        end
        
      else
        UI.message("No API key environment variables found")
        if ENV["CD"]
          UI.user_error!("API key environment variables are required for CI/CD builds")
        else
          UI.message("Local build will rely on existing Xcode configuration")
        end
      end
      
      # Step 5: Build IPA using fastlane build_app (consistent for both local and CI/CD)
      build_type = ENV["CD"] ? "CI/CD" : "Local"
      UI.message("Step 5: Building IPA for #{build_type} using fastlane build_app...")
      
      # Ensure output directories exist
      sh "mkdir -p ../../build/ios/ipa"
      sh "mkdir -p ../../build/ios/archive"

      
      # Set environment variable to prevent Xcode scripts from interfering during build
      ENV["FASTLANE_BUILD"] = "true"
      
      # Step 5a: Build Flutter app (without signing) - matches what Flutter does
      UI.message("Building Flutter app for iOS...")
      sh "cd .. && flutter build ios --release --build-number=#{new_build_number}"
      
      # Step 5b: Archive and sign with fastlane (using the pre-built Flutter app)
      UI.message("Archiving and signing with fastlane...")
      
      
      begin
        # Archive manually without running build scripts again
        UI.message("Creating archive manually...")
        sh "xcodebuild", "-workspace", "../Runner.xcworkspace", "-scheme", "Runner", "-configuration", "Release", "-archivePath", "../../../build/ios/archive/Runner.xcarchive", "archive"
        ENV.delete("FASTLANE_BUILD")
        
        # Always use app-store export method for TestFlight uploads
        export_method = "app-store"
        UI.message("Using app-store export method for TestFlight upload")
        
        # Use Match for team certificate management
        UI.message("Setting up certificates and profiles using Match...")
        begin
          match(
            type: "appstore",
            readonly: true,  # Don't create new certificates, just fetch existing ones
            app_identifier: ENV["BUNDLE_ID"]
          )
          UI.success("✅ Match certificates and profiles ready for app-store export")
        rescue => e
          UI.important("⚠️ Match readonly failed: #{e.message}")
          UI.message("Trying to create certificates (first-time setup)...")
          
          # If readonly fails, try to create new certificates (first-time setup)
          begin
            match(
              type: "appstore",
              readonly: false,  # Allow creating new certificates
              app_identifier: ENV["BUNDLE_ID"]
            )
            UI.success("✅ Match created new certificates and profiles")
          rescue => create_error
            UI.user_error!("❌ Match certificate creation failed: #{create_error.message}")
          end
        end
        
        # Then export the archive
        UI.message("Exporting IPA from archive...")
        build_app(
          export_method: export_method,  # Use app-store if Distribution cert available, ad-hoc otherwise
          output_directory: "../../build/ios/ipa",
          output_name: "Runner.ipa",
          skip_build_archive: true,  # Skip building, just export the existing archive
          archive_path: "../../build/ios/archive/Runner.xcarchive",
          export_options: {
            method: export_method,
            teamID: ENV["TEAM_ID"],
            signingStyle: "automatic",
            uploadBitcode: false,
            uploadSymbols: false,
            compileBitcode: false,
            manageAppVersionAndBuildNumber: false  # We handle build numbers ourselves
          }
        )
      ensure
        # Clean up FASTLANE_BUILD flag after build
        ENV.delete("FASTLANE_BUILD")
      end
      
      UI.success("✅ #{build_type} build completed successfully! Ready for TestFlight upload.")

      # Upload to TestFlight
      ipa_files = Dir.glob("../../build/ios/ipa/*.ipa")
      bundle_id = ENV["BUNDLE_ID"]
      
      # Also try absolute path if relative path doesn't work
      if ipa_files.empty?
        ipa_files = Dir.glob("/Users/teodonnelley/Programming/build/ios/ipa/*.ipa")
      end
      
      # Try using the lane context if available
      if ipa_files.empty? && lane_context[SharedValues::IPA_OUTPUT_PATH]
        ipa_files = [lane_context[SharedValues::IPA_OUTPUT_PATH]]
      end
      
      if ipa_files.empty?
        UI.user_error!("No IPA file found for upload. Checked: ../../build/ios/ipa/*.ipa and lane context")
      end
      
      ipa_path = File.expand_path(ipa_files.first)
      UI.message("Uploading IPA: #{ipa_path}")
      
      upload_to_testflight(
        ipa: ipa_path,
        skip_waiting_for_build_processing: true,
        distribute_external: false,  # Keep this false for internal testing only
        notify_external_testers: false,  # Not needed for internal testing
        groups: ["XCeleration prototype"],  # internal group
        changelog: "Latest updates and bug fixes"  # Optional but recommended
      )
      
    ensure
      # Cleanup function to be called in all cases
      cleanup_build_artifacts
    end
  ensure
    # Final cleanup in case of any errors
    cleanup_build_artifacts
  end

  # Helper method to cleanup build artifacts
  def cleanup_build_artifacts
    UI.message("Cleaning up build artifacts...")
    
    # Revert environment injection to keep git clean
    sh "SRCROOT=#{File.expand_path('..')} bash ../scripts/revert_env_injection.sh" rescue nil
    
    # Clean up API key files from both potential locations
    [
      "./private_keys/AuthKey_*.p8",
      "ios/private_keys/AuthKey_*.p8"
    ].each do |pattern|
      Dir.glob(pattern).each do |key_file|
        File.delete(key_file) rescue nil
        UI.message("Cleaned up #{key_file}")
      end
    end
    
    UI.success("✅ Cleanup completed")
  end
end