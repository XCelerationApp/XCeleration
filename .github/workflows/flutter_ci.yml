name: Flutter CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  lint-and-test:
    name: Lint, Format, and Test on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        flutter-version: ['3.29.x']
        flutter-channel: ['stable']
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ matrix.flutter-version }}
          channel: ${{ matrix.flutter-channel }}
          cache: true
      
      - name: Install dependencies
        run: flutter pub get
      
      - name: Format code automatically
        run: dart format .
        
      - name: Check if formatting caused changes
        id: git-check
        run: |
          if [ -n "$(git status --porcelain)" ]; then
            echo "changes=true" >> $GITHUB_OUTPUT
          else
            echo "changes=false" >> $GITHUB_OUTPUT
          fi
      
      - name: Commit formatting changes
        if: steps.git-check.outputs.changes == 'true'
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "GitHub Actions"
          git add .
          git commit -m "Apply automatic code formatting [skip ci]"
          git push
      
      - name: Analyze project source
        run: flutter analyze --fatal-infos --fatal-warnings
      
      - name: Run unit and widget tests
        run: flutter test --coverage

      - name: Verify Build
        run: flutter build ios
      
      # Optional: Upload test coverage if you set up a coverage tool
      # - name: Upload coverage to Codecov
      #   uses: codecov/codecov-action@v3
      #   with:
      #     file: ./coverage/lcov.info
      
      # Optional: Check for outdated dependencies
      - name: Check for outdated dependencies
        run: flutter pub outdated
      
      # Optional: Run integration tests if you have them (disabled by default)
      # - name: Run integration tests
      #   run: flutter test integration_test

  build:
    name: Build on ${{ matrix.os }}
    needs: lint-and-test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        flutter-version: ['3.29.x']
        flutter-channel: ['stable']
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
      
      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ matrix.flutter-version }}
          channel: ${{ matrix.flutter-channel }}
          cache: true
      
      - name: Install dependencies
        run: flutter pub get
      
      # # Build for Android
      # - name: Build Android APK
      #   run: flutter build apk --release
      
      # Optional: Build for iOS (requires macOS runner)
      # Uncomment if you want to build for iOS on macOS
      # - name: Build iOS (if on macOS)
      #   if: matrix.os == 'macos-latest'
      #   run: flutter build ios --release --no-codesign
      
      # Artifacts can be automatically uploaded
      # - name: Upload APK
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: release-apk
      #     path: build/app/outputs/flutter-apk/app-release.apk
