name: Deploy

on:
  pull_request:
    types: [closed]
    branches: [ main ]

jobs:
  detect-deployment-changes:
    name: Detect Deployment Changes
    runs-on: ubuntu-latest
    # Only deploy when PR from dev is merged to main
    if: github.event.pull_request.merged == true && github.event.pull_request.head.ref == 'dev'
    outputs:
      should-deploy: ${{ steps.changes.outputs.should-deploy }}
      code-changed: ${{ steps.changes.outputs.code-changed }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0

      - name: Detect changes requiring deployment
        id: changes
        run: |
          # Get the list of changed files in the merged PR
          changed_files=$(git diff --name-only HEAD~1 HEAD)
          echo "Changed files:"
          echo "$changed_files"
          
          # Check for code/config changes that require deployment
          if echo "$changed_files" | grep -E "(lib/|assets/|pubspec\.yaml|pubspec\.lock|ios/|android/|analysis_options\.yaml)" > /dev/null; then
            echo "should-deploy=true" >> $GITHUB_OUTPUT
            echo "code-changed=true" >> $GITHUB_OUTPUT
            echo "üöÄ Code or config changes detected - deployment required"
          elif echo "$changed_files" | grep -vE "(\.md$|docs/|README|LICENSE|\.gitignore)" > /dev/null; then
            echo "should-deploy=true" >> $GITHUB_OUTPUT
            echo "code-changed=false" >> $GITHUB_OUTPUT
            echo "ü§î Mixed changes detected - deploying to be safe"
          else
            echo "should-deploy=false" >> $GITHUB_OUTPUT
            echo "code-changed=false" >> $GITHUB_OUTPUT
            echo "üìù Documentation-only changes - skipping deployment"
          fi




  deploy-app:
    name: Deploy Application
    runs-on: macos-latest
    needs: detect-deployment-changes
    if: needs.detect-deployment-changes.outputs.should-deploy == 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: main
          fetch-depth: 0
          persist-credentials: true

      - name: Cache Flutter dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.pub-cache
            .dart_tool
          key: ${{ runner.os }}-flutter-deps-${{ hashFiles('**/pubspec.lock') }}
          restore-keys: |
            ${{ runner.os }}-flutter-deps-

      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.32.5'
          cache: true

      - name: Get Flutter dependencies
        run: flutter pub get

      - name: Verify Flutter setup
        run: |
          flutter --version
          echo "‚úÖ Flutter environment ready"

      - name: Set up Ruby and Bundler
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2.8'
          bundler-cache: true
          working-directory: ./ios

      - name: Create .env file
        run: |
          echo "Creating .env file for deployment..."
          echo "${{ secrets.DOTENV }}" > .env
          echo "‚úÖ .env file created in $(pwd)/.env"
          ls -la .env

      - name: Configure Git for Match repository access
        run: |
          git config --global user.email "action@github.com"
          git config --global user.name "GitHub Action"
          # Configure Git to use Personal Access Token for Match repository access
          # Use PAT if available, fallback to GITHUB_TOKEN
          if [ -n "${{ secrets.PERSONAL_ACCESS_TOKEN }}" ]; then
            echo "Using Personal Access Token for enhanced permissions"
            git config --global url."https://${{ secrets.PERSONAL_ACCESS_TOKEN }}@github.com/".insteadOf "https://github.com/"
          else
            echo "Using default GITHUB_TOKEN (limited permissions)"
            git config --global url."https://${{ secrets.GITHUB_TOKEN }}@github.com/".insteadOf "https://github.com/"
          fi

      - name: Verify GitHub access and Match repository
        run: |
          echo "üîç Verifying GitHub authentication..."
          
          # Use same token logic as above
          if [ -n "${{ secrets.PERSONAL_ACCESS_TOKEN }}" ]; then
            TOKEN="${{ secrets.PERSONAL_ACCESS_TOKEN }}"
            echo "Testing with Personal Access Token"
          else
            TOKEN="${{ secrets.GITHUB_TOKEN }}"
            echo "Testing with default GitHub Token"
          fi
          
          # Test basic GitHub API access
          curl -H "Authorization: token $TOKEN" \
               -H "Accept: application/vnd.github.v3+json" \
               https://api.github.com/user || echo "‚ùå GitHub API access failed"
          
          # Extract repository URL from .env and test access
          MATCH_REPO_URL=$(grep "FASTLANE_MATCH_REPO_URL" .env | cut -d'=' -f2 | tr -d '"' || echo "not_found")
          echo "üìç Match repository URL: $MATCH_REPO_URL"
          
          if [ "$MATCH_REPO_URL" != "not_found" ] && [ -n "$MATCH_REPO_URL" ]; then
            # Extract owner/repo from URL
            REPO_PATH=$(echo "$MATCH_REPO_URL" | sed 's|https://github.com/||' | sed 's|\.git||')
            echo "üéØ Testing access to: $REPO_PATH"
            
            # Test repository access via API
            curl -H "Authorization: token $TOKEN" \
                 -H "Accept: application/vnd.github.v3+json" \
                 "https://api.github.com/repos/$REPO_PATH" || echo "‚ùå Cannot access Match repository"
          else
            echo "‚ö†Ô∏è FASTLANE_MATCH_REPO_URL not found in .env"
          fi

      - name: Restore keychain setup
        run: |
          # Create a temporary keychain for CI (matching Match configuration)
          security create-keychain -p temp_keychain_password fastlane_tmp_keychain
          security default-keychain -s fastlane_tmp_keychain
          security unlock-keychain -p temp_keychain_password fastlane_tmp_keychain
          security set-keychain-settings -t 3600 -l fastlane_tmp_keychain
          # Add keychain to search list
          security list-keychains -d user -s fastlane_tmp_keychain

      - name: Deploy to TestFlight via Fastlane
        working-directory: ./ios
        env:
          CD: true  # Indicate this is a CI/CD environment
        run: bundle exec fastlane deploy

      - name: Cleanup keychain
        if: always()  # Always run cleanup, even if previous steps failed
        run: |
          # Remove the temporary keychain
          security delete-keychain fastlane_tmp_keychain || true