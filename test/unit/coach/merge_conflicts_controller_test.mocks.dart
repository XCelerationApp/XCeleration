// Mocks generated by Mockito 5.4.6 from annotations
// in xceleration/test/unit/coach/merge_conflicts_controller_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i10;
import 'package:sqflite/sqflite.dart' as _i2;
import 'package:xceleration/assistant/race_timer/model/timing_record.dart'
    as _i9;
import 'package:xceleration/coach/race_results/model/results_record.dart'
    as _i8;
import 'package:xceleration/coach/race_screen/model/race_result.dart' as _i7;
import 'package:xceleration/coach/race_screen/widgets/runner_record.dart'
    as _i5;
import 'package:xceleration/core/utils/logger.dart' as _i11;
import 'package:xceleration/shared/models/race.dart' as _i6;
import 'package:xceleration/utils/database_helper.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDatabase_0 extends _i1.SmartFake implements _i2.Database {
  _FakeDatabase_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [DatabaseHelper].
///
/// See the documentation for Mockito's code generation for more information.
class MockDatabaseHelper extends _i1.Mock implements _i3.DatabaseHelper {
  MockDatabaseHelper() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Database> get database => (super.noSuchMethod(
        Invocation.getter(#database),
        returnValue: _i4.Future<_i2.Database>.value(_FakeDatabase_0(
          this,
          Invocation.getter(#database),
        )),
      ) as _i4.Future<_i2.Database>);

  @override
  _i4.Future<int> insertTeamRunner(_i5.RunnerRecord? runner) =>
      (super.noSuchMethod(
        Invocation.method(
          #insertTeamRunner,
          [runner],
        ),
        returnValue: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);

  @override
  _i4.Future<int> updateTeamRunner(_i5.RunnerRecord? runner) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateTeamRunner,
          [runner],
        ),
        returnValue: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);

  @override
  _i4.Future<List<_i5.RunnerRecord>> getAllTeamRunners() => (super.noSuchMethod(
        Invocation.method(
          #getAllTeamRunners,
          [],
        ),
        returnValue:
            _i4.Future<List<_i5.RunnerRecord>>.value(<_i5.RunnerRecord>[]),
      ) as _i4.Future<List<_i5.RunnerRecord>>);

  @override
  _i4.Future<_i5.RunnerRecord?> getTeamRunnerByBib(String? bib) =>
      (super.noSuchMethod(
        Invocation.method(
          #getTeamRunnerByBib,
          [bib],
        ),
        returnValue: _i4.Future<_i5.RunnerRecord?>.value(),
      ) as _i4.Future<_i5.RunnerRecord?>);

  @override
  _i4.Future<int> deleteTeamRunner(String? bib) => (super.noSuchMethod(
        Invocation.method(
          #deleteTeamRunner,
          [bib],
        ),
        returnValue: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);

  @override
  _i4.Future<int> insertRace(_i6.Race? race) => (super.noSuchMethod(
        Invocation.method(
          #insertRace,
          [race],
        ),
        returnValue: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);

  @override
  _i4.Future<int> updateRace(_i6.Race? race) => (super.noSuchMethod(
        Invocation.method(
          #updateRace,
          [race],
        ),
        returnValue: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);

  @override
  _i4.Future<List<_i6.Race>> getAllRaces() => (super.noSuchMethod(
        Invocation.method(
          #getAllRaces,
          [],
        ),
        returnValue: _i4.Future<List<_i6.Race>>.value(<_i6.Race>[]),
      ) as _i4.Future<List<_i6.Race>>);

  @override
  _i4.Future<_i6.Race?> getRaceById(int? id) => (super.noSuchMethod(
        Invocation.method(
          #getRaceById,
          [id],
        ),
        returnValue: _i4.Future<_i6.Race?>.value(),
      ) as _i4.Future<_i6.Race?>);

  @override
  _i4.Future<int> insertRaceRunner(_i5.RunnerRecord? runner) =>
      (super.noSuchMethod(
        Invocation.method(
          #insertRaceRunner,
          [runner],
        ),
        returnValue: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);

  @override
  _i4.Future<List<_i5.RunnerRecord>> getRaceRunners(int? raceId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getRaceRunners,
          [raceId],
        ),
        returnValue:
            _i4.Future<List<_i5.RunnerRecord>>.value(<_i5.RunnerRecord>[]),
      ) as _i4.Future<List<_i5.RunnerRecord>>);

  @override
  _i4.Future<_i5.RunnerRecord?> getRaceRunnerByBib(
    int? raceId,
    String? bibNumber,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getRaceRunnerByBib,
          [
            raceId,
            bibNumber,
          ],
        ),
        returnValue: _i4.Future<_i5.RunnerRecord?>.value(),
      ) as _i4.Future<_i5.RunnerRecord?>);

  @override
  _i4.Future<List<_i5.RunnerRecord>> getRaceRunnersByBibs(
    int? raceId,
    List<String>? bibNumbers,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #getRaceRunnersByBibs,
          [
            raceId,
            bibNumbers,
          ],
        ),
        returnValue:
            _i4.Future<List<_i5.RunnerRecord>>.value(<_i5.RunnerRecord>[]),
      ) as _i4.Future<List<_i5.RunnerRecord>>);

  @override
  _i4.Future<void> updateRaceRunner(_i5.RunnerRecord? runner) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateRaceRunner,
          [runner],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> deleteRaceRunner(
    int? raceId,
    String? bibNumber,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #deleteRaceRunner,
          [
            raceId,
            bibNumber,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<List<_i5.RunnerRecord>> searchRaceRunners(
    int? raceId,
    String? query, [
    String? searchParameter = 'all',
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #searchRaceRunners,
          [
            raceId,
            query,
            searchParameter,
          ],
        ),
        returnValue:
            _i4.Future<List<_i5.RunnerRecord>>.value(<_i5.RunnerRecord>[]),
      ) as _i4.Future<List<_i5.RunnerRecord>>);

  @override
  _i4.Future<void> insertRaceResults(List<_i7.RaceResult>? results) =>
      (super.noSuchMethod(
        Invocation.method(
          #insertRaceResults,
          [results],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<List<_i8.ResultsRecord>> getRaceResults(int? raceId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getRaceResults,
          [raceId],
        ),
        returnValue:
            _i4.Future<List<_i8.ResultsRecord>>.value(<_i8.ResultsRecord>[]),
      ) as _i4.Future<List<_i8.ResultsRecord>>);

  @override
  _i4.Future<List<_i9.TimeRecord>> getAllResults() => (super.noSuchMethod(
        Invocation.method(
          #getAllResults,
          [],
        ),
        returnValue:
            _i4.Future<List<_i9.TimeRecord>>.value(<_i9.TimeRecord>[]),
      ) as _i4.Future<List<_i9.TimeRecord>>);

  @override
  _i4.Future<String> getRaceState(
    int? raceId, {
    dynamic race,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #getRaceState,
          [raceId],
          {#race: race},
        ),
        returnValue: _i4.Future<String>.value(_i10.dummyValue<String>(
          this,
          Invocation.method(
            #getRaceState,
            [raceId],
            {#race: race},
          ),
        )),
      ) as _i4.Future<String>);

  @override
  _i4.Future<void> updateRaceFlowState(
    int? raceId,
    String? flowState,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateRaceFlowState,
          [
            raceId,
            flowState,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> saveRaceResults(
    int? raceId,
    List<_i8.ResultsRecord>? resultRecords,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #saveRaceResults,
          [
            raceId,
            resultRecords,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<List<_i8.ResultsRecord>?> getRaceResultsData(int? raceId) =>
      (super.noSuchMethod(
        Invocation.method(
          #getRaceResultsData,
          [raceId],
        ),
        returnValue: _i4.Future<List<_i8.ResultsRecord>?>.value(),
      ) as _i4.Future<List<_i8.ResultsRecord>?>);

  @override
  _i4.Future<void> updateRaceField(
    int? raceId,
    String? field,
    dynamic value,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #updateRaceField,
          [
            raceId,
            field,
            value,
          ],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> deleteRace(int? raceId) => (super.noSuchMethod(
        Invocation.method(
          #deleteRace,
          [raceId],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> deleteAllRaces() => (super.noSuchMethod(
        Invocation.method(
          #deleteAllRaces,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> deleteAllRaceRunners(int? raceId) => (super.noSuchMethod(
        Invocation.method(
          #deleteAllRaceRunners,
          [raceId],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> clearTeamRunners() => (super.noSuchMethod(
        Invocation.method(
          #clearTeamRunners,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> deleteDatabase() => (super.noSuchMethod(
        Invocation.method(
          #deleteDatabase,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);

  @override
  _i4.Future<void> close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _i4.Future<void>.value(),
        returnValueForMissingStub: _i4.Future<void>.value(),
      ) as _i4.Future<void>);
}

/// A class which mocks [Logger].
///
/// See the documentation for Mockito's code generation for more information.
class MockLogger extends _i1.Mock implements _i11.Logger {
  MockLogger() {
    _i1.throwOnMissingStub(this);
  }
}
