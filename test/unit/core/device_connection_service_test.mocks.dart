// Mocks generated by Mockito 5.4.6 from annotations
// in xceleration/test/unit/core/device_connection_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:flutter_nearby_connections/flutter_nearby_connections.dart'
    as _i6;
import 'package:mockito/mockito.dart' as _i1;
import 'package:xceleration/core/services/device_connection_service.dart'
    as _i2;
import 'package:xceleration/core/services/nearby_connections.dart' as _i5;
import 'package:xceleration/core/utils/enums.dart' as _i4;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDevicesManager_0 extends _i1.SmartFake
    implements _i2.DevicesManager {
  _FakeDevicesManager_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeStreamSubscription_1<T> extends _i1.SmartFake
    implements _i3.StreamSubscription<T> {
  _FakeStreamSubscription_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [DevicesManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockDevicesManager extends _i1.Mock implements _i2.DevicesManager {
  MockDevicesManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.DeviceName get currentDeviceName => (super.noSuchMethod(
        Invocation.getter(#currentDeviceName),
        returnValue: _i4.DeviceName.coach,
      ) as _i4.DeviceName);

  @override
  _i4.DeviceType get currentDeviceType => (super.noSuchMethod(
        Invocation.getter(#currentDeviceType),
        returnValue: _i4.DeviceType.advertiserDevice,
      ) as _i4.DeviceType);

  @override
  List<_i2.ConnectedDevice> get devices => (super.noSuchMethod(
        Invocation.getter(#devices),
        returnValue: <_i2.ConnectedDevice>[],
      ) as List<_i2.ConnectedDevice>);

  @override
  List<_i2.ConnectedDevice> get otherDevices => (super.noSuchMethod(
        Invocation.getter(#otherDevices),
        returnValue: <_i2.ConnectedDevice>[],
      ) as List<_i2.ConnectedDevice>);

  @override
  void reset() => super.noSuchMethod(
        Invocation.method(
          #reset,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool hasDevice(_i4.DeviceName? name) => (super.noSuchMethod(
        Invocation.method(
          #hasDevice,
          [name],
        ),
        returnValue: false,
      ) as bool);

  @override
  _i2.ConnectedDevice? getDevice(_i4.DeviceName? name) =>
      (super.noSuchMethod(Invocation.method(
        #getDevice,
        [name],
      )) as _i2.ConnectedDevice?);

  @override
  bool allDevicesFinished() => (super.noSuchMethod(
        Invocation.method(
          #allDevicesFinished,
          [],
        ),
        returnValue: false,
      ) as bool);

  @override
  _i2.DevicesManager copy() => (super.noSuchMethod(
        Invocation.method(
          #copy,
          [],
        ),
        returnValue: _FakeDevicesManager_0(
          this,
          Invocation.method(
            #copy,
            [],
          ),
        ),
      ) as _i2.DevicesManager);
}

/// A class which mocks [NearbyConnections].
///
/// See the documentation for Mockito's code generation for more information.
class MockNearbyConnections extends _i1.Mock implements _i5.NearbyConnections {
  MockNearbyConnections() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<dynamic> init({
    required String? serviceType,
    String? deviceName,
    required _i6.Strategy? strategy,
    required Function? callback,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #init,
          [],
          {
            #serviceType: serviceType,
            #deviceName: deviceName,
            #strategy: strategy,
            #callback: callback,
          },
        ),
        returnValue: _i3.Future<dynamic>.value(),
      ) as _i3.Future<dynamic>);

  @override
  _i3.StreamSubscription<dynamic> stateChangedSubscription(
          {required dynamic Function(List<_i6.Device>)? callback}) =>
      (super.noSuchMethod(
        Invocation.method(
          #stateChangedSubscription,
          [],
          {#callback: callback},
        ),
        returnValue: _FakeStreamSubscription_1<dynamic>(
          this,
          Invocation.method(
            #stateChangedSubscription,
            [],
            {#callback: callback},
          ),
        ),
      ) as _i3.StreamSubscription<dynamic>);

  @override
  _i3.FutureOr<dynamic> invitePeer({
    required String? deviceID,
    required String? deviceName,
  }) =>
      (super.noSuchMethod(Invocation.method(
        #invitePeer,
        [],
        {
          #deviceID: deviceID,
          #deviceName: deviceName,
        },
      )) as _i3.FutureOr<dynamic>);

  @override
  _i3.FutureOr<dynamic> disconnectPeer({required String? deviceID}) =>
      (super.noSuchMethod(Invocation.method(
        #disconnectPeer,
        [],
        {#deviceID: deviceID},
      )) as _i3.FutureOr<dynamic>);

  @override
  _i3.FutureOr<dynamic> sendMessage(
    String? deviceID,
    String? message,
  ) =>
      (super.noSuchMethod(Invocation.method(
        #sendMessage,
        [
          deviceID,
          message,
        ],
      )) as _i3.FutureOr<dynamic>);

  @override
  _i3.StreamSubscription<dynamic> dataReceivedSubscription(
          {required dynamic Function(dynamic)? callback}) =>
      (super.noSuchMethod(
        Invocation.method(
          #dataReceivedSubscription,
          [],
          {#callback: callback},
        ),
        returnValue: _FakeStreamSubscription_1<dynamic>(
          this,
          Invocation.method(
            #dataReceivedSubscription,
            [],
            {#callback: callback},
          ),
        ),
      ) as _i3.StreamSubscription<dynamic>);
}
