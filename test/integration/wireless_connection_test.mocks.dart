// Mocks generated by Mockito 5.4.6 from annotations
// in xceleration/test/integration/wireless_connection_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;
import 'package:flutter_nearby_connections/flutter_nearby_connections.dart'
    as _i4;
import 'package:mockito/mockito.dart' as _i1;
import 'package:xceleration/core/services/device_connection_service.dart'
    as _i2;
import 'package:xceleration/core/utils/data_package.dart' as _i5;
import 'package:xceleration/core/utils/data_protocol.dart' as _i6;
import 'package:xceleration/core/utils/enums.dart' as _i7;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDuration_0 extends _i1.SmartFake implements Duration {
  _FakeDuration_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDeviceConnectionService_1 extends _i1.SmartFake
    implements _i2.DeviceConnectionService {
  _FakeDeviceConnectionService_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeDevicesManager_2 extends _i1.SmartFake
    implements _i2.DevicesManager {
  _FakeDevicesManager_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [DeviceConnectionService].
///
/// See the documentation for Mockito's code generation for more information.
class MockDeviceConnectionService extends _i1.Mock
    implements _i2.DeviceConnectionService {
  MockDeviceConnectionService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  int get maxReconnectionAttempts => (super.noSuchMethod(
        Invocation.getter(#maxReconnectionAttempts),
        returnValue: 0,
      ) as int);

  @override
  Duration get rescanBackoff => (super.noSuchMethod(
        Invocation.getter(#rescanBackoff),
        returnValue: _FakeDuration_0(
          this,
          Invocation.getter(#rescanBackoff),
        ),
      ) as Duration);

  @override
  bool get nearbyConnectionsInitialized => (super.noSuchMethod(
        Invocation.getter(#nearbyConnectionsInitialized),
        returnValue: false,
      ) as bool);

  @override
  bool get isActive => (super.noSuchMethod(
        Invocation.getter(#isActive),
        returnValue: false,
      ) as bool);

  @override
  set rescanBackoff(Duration? _rescanBackoff) => super.noSuchMethod(
        Invocation.setter(
          #rescanBackoff,
          _rescanBackoff,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set nearbyConnectionsInitialized(bool? _nearbyConnectionsInitialized) =>
      super.noSuchMethod(
        Invocation.setter(
          #nearbyConnectionsInitialized,
          _nearbyConnectionsInitialized,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set receivedDataSubscription(
          _i3.StreamSubscription<dynamic>? _receivedDataSubscription) =>
      super.noSuchMethod(
        Invocation.setter(
          #receivedDataSubscription,
          _receivedDataSubscription,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set deviceMonitorSubscription(
          _i3.StreamSubscription<dynamic>? _deviceMonitorSubscription) =>
      super.noSuchMethod(
        Invocation.setter(
          #deviceMonitorSubscription,
          _deviceMonitorSubscription,
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.Future<bool> checkIfNearbyConnectionsWorks(
          {Duration? timeout = const Duration(seconds: 5)}) =>
      (super.noSuchMethod(
        Invocation.method(
          #checkIfNearbyConnectionsWorks,
          [],
          {#timeout: timeout},
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  _i3.Future<bool> init() => (super.noSuchMethod(
        Invocation.method(
          #init,
          [],
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  _i3.Future<void> monitorDevicesConnectionStatus({
    _i3.Future<void> Function(_i4.Device)? deviceFoundCallback,
    _i3.Future<void> Function(_i4.Device)? deviceConnectingCallback,
    _i3.Future<void> Function(_i4.Device)? deviceConnectedCallback,
    Duration? timeout = const Duration(seconds: 60),
    _i3.Future<void> Function()? timeoutCallback,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #monitorDevicesConnectionStatus,
          [],
          {
            #deviceFoundCallback: deviceFoundCallback,
            #deviceConnectingCallback: deviceConnectingCallback,
            #deviceConnectedCallback: deviceConnectedCallback,
            #timeout: timeout,
            #timeoutCallback: timeoutCallback,
          },
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<bool> inviteDevice(_i4.Device? device) => (super.noSuchMethod(
        Invocation.method(
          #inviteDevice,
          [device],
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  _i3.Future<bool> attemptReconnection(_i4.Device? device) =>
      (super.noSuchMethod(
        Invocation.method(
          #attemptReconnection,
          [device],
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  _i3.Future<bool> disconnectDevice(_i4.Device? device) => (super.noSuchMethod(
        Invocation.method(
          #disconnectDevice,
          [device],
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  _i3.Future<bool> sendMessageToDevice(
    _i4.Device? device,
    _i5.Package? package,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendMessageToDevice,
          [
            device,
            package,
          ],
        ),
        returnValue: _i3.Future<bool>.value(false),
      ) as _i3.Future<bool>);

  @override
  _i3.Future<String?> monitorMessageReceives(
    _i4.Device? device, {
    required dynamic Function(
      _i5.Package,
      String,
    )? messageReceivedCallback,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #monitorMessageReceives,
          [device],
          {#messageReceivedCallback: messageReceivedCallback},
        ),
        returnValue: _i3.Future<String?>.value(),
      ) as _i3.Future<String?>);

  @override
  void stopMessageMonitoring(String? token) => super.noSuchMethod(
        Invocation.method(
          #stopMessageMonitoring,
          [token],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [Protocol].
///
/// See the documentation for Mockito's code generation for more information.
class MockProtocol extends _i1.Mock implements _i6.Protocol {
  MockProtocol() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.DeviceConnectionService get deviceConnectionService =>
      (super.noSuchMethod(
        Invocation.getter(#deviceConnectionService),
        returnValue: _FakeDeviceConnectionService_1(
          this,
          Invocation.getter(#deviceConnectionService),
        ),
      ) as _i2.DeviceConnectionService);

  @override
  Map<String, _i4.Device> get connectedDevices => (super.noSuchMethod(
        Invocation.getter(#connectedDevices),
        returnValue: <String, _i4.Device>{},
      ) as Map<String, _i4.Device>);

  @override
  bool get isTerminated => (super.noSuchMethod(
        Invocation.getter(#isTerminated),
        returnValue: false,
      ) as bool);

  @override
  void addDevice(_i4.Device? device) => super.noSuchMethod(
        Invocation.method(
          #addDevice,
          [device],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void removeDevice(String? deviceId) => super.noSuchMethod(
        Invocation.method(
          #removeDevice,
          [deviceId],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.Future<void> terminate() => (super.noSuchMethod(
        Invocation.method(
          #terminate,
          [],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> handleMessage(
    _i5.Package? package,
    String? senderId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #handleMessage,
          [
            package,
            senderId,
          ],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<void> sendData(
    String? data,
    String? senderId,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #sendData,
          [
            data,
            senderId,
          ],
        ),
        returnValue: _i3.Future<void>.value(),
        returnValueForMissingStub: _i3.Future<void>.value(),
      ) as _i3.Future<void>);

  @override
  _i3.Future<String?> handleDataTransfer({
    required String? deviceId,
    String? dataToSend,
    bool? isReceiving = false,
    required bool Function()? shouldContinueTransfer,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #handleDataTransfer,
          [],
          {
            #deviceId: deviceId,
            #dataToSend: dataToSend,
            #isReceiving: isReceiving,
            #shouldContinueTransfer: shouldContinueTransfer,
          },
        ),
        returnValue: _i3.Future<String?>.value(),
      ) as _i3.Future<String?>);

  @override
  void resetDeviceState(String? deviceId) => super.noSuchMethod(
        Invocation.method(
          #resetDeviceState,
          [deviceId],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void clear() => super.noSuchMethod(
        Invocation.method(
          #clear,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool isFinished(String? deviceId) => (super.noSuchMethod(
        Invocation.method(
          #isFinished,
          [deviceId],
        ),
        returnValue: false,
      ) as bool);
}

/// A class which mocks [DevicesManager].
///
/// See the documentation for Mockito's code generation for more information.
class MockDevicesManager extends _i1.Mock implements _i2.DevicesManager {
  MockDevicesManager() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.DeviceName get currentDeviceName => (super.noSuchMethod(
        Invocation.getter(#currentDeviceName),
        returnValue: _i7.DeviceName.coach,
      ) as _i7.DeviceName);

  @override
  _i7.DeviceType get currentDeviceType => (super.noSuchMethod(
        Invocation.getter(#currentDeviceType),
        returnValue: _i7.DeviceType.advertiserDevice,
      ) as _i7.DeviceType);

  @override
  List<_i2.ConnectedDevice> get devices => (super.noSuchMethod(
        Invocation.getter(#devices),
        returnValue: <_i2.ConnectedDevice>[],
      ) as List<_i2.ConnectedDevice>);

  @override
  List<_i2.ConnectedDevice> get otherDevices => (super.noSuchMethod(
        Invocation.getter(#otherDevices),
        returnValue: <_i2.ConnectedDevice>[],
      ) as List<_i2.ConnectedDevice>);

  @override
  void reset() => super.noSuchMethod(
        Invocation.method(
          #reset,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool hasDevice(_i7.DeviceName? name) => (super.noSuchMethod(
        Invocation.method(
          #hasDevice,
          [name],
        ),
        returnValue: false,
      ) as bool);

  @override
  _i2.ConnectedDevice? getDevice(_i7.DeviceName? name) =>
      (super.noSuchMethod(Invocation.method(
        #getDevice,
        [name],
      )) as _i2.ConnectedDevice?);

  @override
  bool allDevicesFinished() => (super.noSuchMethod(
        Invocation.method(
          #allDevicesFinished,
          [],
        ),
        returnValue: false,
      ) as bool);

  @override
  _i2.DevicesManager copy() => (super.noSuchMethod(
        Invocation.method(
          #copy,
          [],
        ),
        returnValue: _FakeDevicesManager_2(
          this,
          Invocation.method(
            #copy,
            [],
          ),
        ),
      ) as _i2.DevicesManager);
}
